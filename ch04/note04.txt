-------------------------------------------------
4.2 上一条命令是否成功执行（用变量$?）
$somecommand
$echo $?
如果执行成功，$?的值为0，否则$?的值为非零的值
-------------------------------------------------
4.4 用 & 在后台运行程序
$ gnome-open . &
将在shell的后台运行gnome-open命令，且在控制台输出进程id
$ command1 & command2 & command3 &
同时执行上面三个命令，输出进程id
-------------------------------------------------
4.6 用 && 减少if语句的使用
$cd mytmp && ls 
如果 && 前面的命令成功执行，即exit状态为0，才执行第二条命令
（注意，这和C语言中 && 的行为完全相反）
-------------------------------------------------
4.7 在退出bash以后，还能运行的命令
$nohup command1  &
将输出添加到nohup.out文件的后面
（但不能用这种方式执行GUI命令）
-------------------------------------------------
4.8 当命令执行出错时，输出错误信息
$cmd || printf "%b" "cmd failed. You're on your own\n"
-------------------------------------------------
4.9 执行保存在变量中的命令
PROGRAM=echo
$PROGRAM "some text"
-------------------------------------------------
4.10 执行目录中的所有脚本
run_all_script.sh
for SCRIPT in /somepath/dir/*
do
	if [ -f $SCRIPT -a -x $SCRIPT ];then
	   $SCRIPT	
	fi
done
-------------------------------------------------
