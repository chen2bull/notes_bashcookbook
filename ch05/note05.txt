-------------------------------------------------------
5.1 单行注释
# This is a comment.
-------------------------------------------------------
5.2 多行注释
embedded_documentation.sh
使用:，即空操作和Here文档
:<<'END_OF_DOCS'
这是多行注释
。。。
很多行的
END_FO_DOCS
-------------------------------------------------------
5.5 全局变量
export MYVAR	#这样在该作用域的MYVAR就是全局变量
-------------------------------------------------------
5.6 观测所有的全局变量
执行env 或则 export -p
-------------------------------------------------------
5.7 命令行参数
"$1" “${1}” 表示第一个参数
"$2" “${2}” 表示第二个参数，以此类推
#由于每个参数有可能有空格，如“hello world”，所以，$1两边必须有双引号
-------------------------------------------------------
5.8 所有的命令参数用$*来表示(过时的方式)
chmod_750_all.1.sh
-------------------------------------------------------
5.10 所有的命令参数用“$@"来表示(正确用法)
chmod_750_all.2.sh
$*和$@表示的字符串相同，但“$*”是对所有参数组成的字符串，
而"$@"则是对每个参数加双引号。
e.g:目录中有三个mp3文件:1.mp3,the sec.mp3,third.mp3.
执行./my_script.sh *.mp3 以后,在my_script.sh中，
"$*" 表示 “1.mp3 the sec.mp3 third.mp3.”
“$@” 表示 “1.mp3” "the sec.mp3" "third.mp3"
-------------------------------------------------------
5.11 获得变量的个数$#
check_arg_count.sh
-------------------------------------------------------
5.12 命令行选项的处理（用shift n；减去前n个命令行参数）
use_up_option.sh
-------------------------------------------------------
5.13 获得默认值，用${:-}
FILEDIR=${1:-"/tmp"}
如果没有$1,则默认值为"/tmp"
-------------------------------------------------------
5.14 设置默认值,用${:=}
cd ${SOME_DIR:=/tmp}
如果没有SOME_DIR,或SOME_DIR为空,则默认值为/tmp
-------------------------------------------------------
5.15 设置默认值，用${=}
cd ${SOME_DIR=/tmp}
只有SOME_DIR不存在是,默认值为/tmp。
如果SOME_DIR为空，则${SOME_DIR=/tmp}的结果照样为空。
-------------------------------------------------------
5.16 用非常量设置默认值
cd ${BASE:="$(pwd)"}
-------------------------------------------------------
5.17 当某个变量没有设置时，输出报错信息
check_unset_parms.sh
${1:?"Error.You must supply the first arg."}
-------------------------------------------------------
5.18 改变变量中一部分字符串
suffixer.sh	批量修改文件后缀（应该使用下面第一种方法）
${string%pattern}	删除符合正则表达式的最短字符串
${string%%pattern}	删除符合正则表达式的最长字符串
${name/pattern/string}	替代第一个符合正则表达是的字符串
${name//pattern/string}	替代所有的符合正则表达是的字符串
-------------------------------------------------------
5.19 使用数组（Bash目前只支持一维数组）
MYARR=(first second third home)
那么"${MYARR[2]}"就是"third"
-------------------------------------------------------
