----------------------------------------------------------------------
7.1 从多个文件中找出复合（正则）表达式的行。
$grep printf ../ch06/*.sh （从指定的文件中找到含有字符串printf的行）
../ch06/dash.sh:printf "%s\n" "$DASHES"
../ch06/strvsnum.sh:printf "%s" "do they -eq as equal? "
../ch06/strvsnum.sh:printf "%s" "do they = as equal? "
如果不想看到右边的文件名，可以在grep后面加 -h 选项
如果只是想看到该字符串在不同文件中出现的次数,可以用 -c
----------------------------------------------------------------------
7.2 只获得出现字符串的文件名
$grep -l printf ../ch06/*.sh
可轻易产生想要处理的文件列表
$rm -i $(grep -l 'This file is obsolete' *)
----------------------------------------------------------------------
7.3 只想看到一个文件中是否有指定的字符串，不想有输出
$grep somestring bigdata.file > /dev/null
#以上命令如果成功找到字符串，$?为0（注意返回0表示程序正常结束）
$if [ $? -eq 0 ];then echo yes;else echo no;fi
----------------------------------------------------------------------
7.4 grep忽略大小写用-i（ignore case）
----------------------------------------------------------------------
7.5 以管道作为grep的输入(如果不提供文件名给grep，grep从STDIN中获得输入)
$somecommand | someothers | grep somestring
$gcc bigbadcode.c 2>&1 | grep -i error(先将STDERR重定向到STDIN)
----------------------------------------------------------------------
7.6 从查找的结果中排除有指定字符串的行（用-v选项）
$grep -i sometext logfile | grep -vi dontwanted
----------------------------------------------------------------------
7.7 grep支持正则表达式
用正则表达式匹配一个IP地址
ifconfig | grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'
----------------------------------------------------------------------
7.8 zgrep,zcat,gzcat来处理压缩文件
注意:zgrep还可在一个被破坏的压缩包中读取文件
----------------------------------------------------------------------
7.10 用awk只获取文件的第一部分
$awk '{print $1}' myinput.file 将打印myinput.file中每一行的第一个单词
$awk '{print $1}' < myinput.file	#作用同上
$cat myinput.file | awk '{print $1}' 	#作用同上，只是输入不同
$1第一个Field，awk中的Fields默认是由空白字符分割的，也可以用-F来指定分割字符。
$NF表示最后一个Field。$0比较特别，它不是一个Field，而是表示整行。
----------------------------------------------------------------------
7.11 用awk获取输出的一部分
比如只想获取ls输出的权限和文件名
$ls -l | awk '{print $1,$NF}'	或者以下带字符串格式化的形式
$ls -l | awk '{printf "%s %s\n",$1,$NF}'
----------------------------------------------------------------------
7.12 awk将每行都逆序输出
awk ‘{
    for (i=NF;i>0;i--){
    	printf "%s ",$i;
    }
    printf "\n"
}’
----------------------------------------------------------------------
7.13 计算列表中某一列的和
如，下面将计算ls -l中列出的所有文件大小的和，并在最后输出它的值
ls -l | awk '{sum +=$5} END {print sum}'
在{}代码块前，加END表示在其他程序完成后执行一次。加入BEGIN即在开始时执行。
----------------------------------------------------------------------
7.14 用awk中的哈希表来计算所有用户拥有的文件数
（这个程序要在执行前，不知道有那些用户）
用本目录下的asar.awk
$ls -lR /usr/local | awk -f asar.awk
----------------------------------------------------------------------
7.15 用awk画一个横向的柱状图
para.awk
----------------------------------------------------------------------
7.16 用awk查看一个段落(被改成擦看所有awk代码块)
用本目录下的para.awk
$awk -f para.awk < hist.awk #将查看hist.awk中，由{到}的代码块
----------------------------------------------------------------------
7.aa 指定awk的分割符用 -F
----------------------------------------------------------------------
